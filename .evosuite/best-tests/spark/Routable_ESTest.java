/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 22 02:07:05 GMT 2018
 */

package spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.ResponseTransformer;
import spark.Route;
import spark.Service;
import spark.TemplateEngine;
import spark.TemplateViewRoute;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Routable_ESTest extends Routable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.head("7]I HL'UEx81k9-,d?", templateViewRoute0, templateEngine0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Service service0 = Service.ignite();
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service0.options("Au:r", route0, (ResponseTransformer) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Service service0 = Service.ignite();
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service0.patch("}hnBVcl7h0utT", "", route0, responseTransformer0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Service service0 = Service.ignite();
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service0.patch("spark.Routable", route0, responseTransformer0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Service service0 = Service.ignite();
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      ResponseTransformer responseTransformer0 = mock(ResponseTransformer.class, new ViolatedAssumptionAnswer());
      service0.connect("brNc@x", route0, responseTransformer0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.trace("zdYDnT:y!h-GC'4I'", templateViewRoute0, templateEngine0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.post("", templateViewRoute0, templateEngine0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Service service0 = Service.ignite();
      Route route0 = mock(Route.class, new ViolatedAssumptionAnswer());
      service0.patch((String) null, route0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.put("dp0I", (TemplateViewRoute) null, templateEngine0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Service service0 = Service.ignite();
      TemplateViewRoute templateViewRoute0 = mock(TemplateViewRoute.class, new ViolatedAssumptionAnswer());
      TemplateEngine templateEngine0 = mock(TemplateEngine.class, new ViolatedAssumptionAnswer());
      service0.connect("uv+", "", templateViewRoute0, templateEngine0);
  }
}
