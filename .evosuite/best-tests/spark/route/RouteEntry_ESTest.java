/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 22 02:03:15 GMT 2018
 */

package spark.route;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.route.HttpMethod;
import spark.route.RouteEntry;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RouteEntry_ESTest extends RouteEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.put;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.path = "SvCa<xCUl`OFM<D;>";
      routeEntry0.toString();
      routeEntry0.path = "connect/";
      routeEntry0.matches(httpMethod0, "SvCa<xCUl`OFM<D;>");
      routeEntry0.toString();
      routeEntry0.matches(httpMethod0, "/>a#V_b*");
      HttpMethod httpMethod1 = HttpMethod.post;
      routeEntry0.acceptedType = ":";
      routeEntry0.matches(httpMethod1, "put, SvCa<xCUl`OFM<D;>, null");
      HttpMethod httpMethod2 = HttpMethod.connect;
      HttpMethod httpMethod3 = HttpMethod.trace;
      routeEntry0.matches(httpMethod3, "]@L");
      routeEntry0.toString();
      routeEntry0.matches(httpMethod2, "put, connect/, null");
      routeEntry0.toString();
      routeEntry0.matches(httpMethod2, "18c");
      routeEntry0.matches(httpMethod1, "put, SvCa<xCUl`OFM<D;>, null");
      routeEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      Object object0 = new Object();
      routeEntry0.target = object0;
      HttpMethod httpMethod0 = HttpMethod.post;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.path = "unsupported, , ";
      routeEntry0.matches(httpMethod0, "+H jF%}x>+=@mh4");
      HttpMethod httpMethod1 = HttpMethod.before;
      routeEntry0.matches(httpMethod1, "");
      routeEntry0.matches(httpMethod0, "");
      routeEntry0.toString();
      routeEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "/>a#V_f*";
      HttpMethod httpMethod0 = HttpMethod.trace;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.matches(httpMethod0, ",ZSeaq}dyFc'D2");
      routeEntry0.target = (Object) routeEntry0.httpMethod;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.acceptedType = "";
      HttpMethod httpMethod1 = HttpMethod.unsupported;
      routeEntry0.matches(httpMethod1, ",ZSeaq}dyFc'D2");
      HttpMethod httpMethod2 = HttpMethod.get;
      routeEntry0.matches(httpMethod2, "delete");
      HttpMethod httpMethod3 = HttpMethod.put;
      routeEntry0.matches(httpMethod0, "");
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.matches(httpMethod0, "trace, />a#V_f*, trace");
      HttpMethod httpMethod4 = HttpMethod.head;
      routeEntry0.matches(httpMethod4, "");
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.path = "@}";
      routeEntry0.acceptedType = "c";
      routeEntry0.path = "F";
      RouteEntry routeEntry1 = new RouteEntry(routeEntry0);
      Object object0 = routeEntry1.target;
      routeEntry1.target = null;
      routeEntry0.matches(httpMethod0, ":$r(/");
      routeEntry1.target = (Object) "F";
      routeEntry1.toString();
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry1.matches(routeEntry0.httpMethod, "c");
      HttpMethod httpMethod1 = HttpMethod.options;
      routeEntry1.matches(httpMethod1, "$VALUES");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.after;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.httpMethod = httpMethod0;
      Object object0 = routeEntry0.target;
      routeEntry0.path = "U#";
      routeEntry0.matches(httpMethod0, "U#");
      HttpMethod httpMethod1 = HttpMethod.post;
      routeEntry0.matches(httpMethod1, "GkT[)");
      String string0 = routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.toString();
      HttpMethod httpMethod2 = HttpMethod.before;
      String string1 = null;
      HttpMethod.valueOf("VMX");
      routeEntry0.matches(httpMethod2, string1);
      HttpMethod httpMethod3 = HttpMethod.options;
      routeEntry0.matches(httpMethod3, string0);
      // Undeclared exception!
      try { 
        routeEntry0.matches(httpMethod3, routeEntry0.path);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant spark.route.HttpMethod.VMX
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "connect";
      HttpMethod httpMethod0 = HttpMethod.trace;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.acceptedType = "connect*";
      routeEntry0.path = ":r(";
      routeEntry0.matches(httpMethod0, "");
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.matches(httpMethod0, "ZkE[4SB~?H*");
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.toString();
      String string0 = routeEntry0.path;
      HttpMethod httpMethod1 = HttpMethod.connect;
      routeEntry0.matches(httpMethod1, "connect");
      routeEntry0.toString();
      HttpMethod httpMethod2 = HttpMethod.get;
      routeEntry0.matches(httpMethod2, "+/*paths");
      routeEntry0.toString();
      HttpMethod httpMethod3 = HttpMethod.unsupported;
      routeEntry0.matches(httpMethod3, "+/*paths");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      RouteEntry routeEntry1 = new RouteEntry(routeEntry0);
      HttpMethod httpMethod0 = HttpMethod.after;
      routeEntry1.httpMethod = httpMethod0;
      routeEntry1.path = "";
      routeEntry1.target = (Object) "";
      routeEntry1.matches(httpMethod0, "");
      HttpMethod httpMethod1 = HttpMethod.trace;
      routeEntry0.matches(httpMethod1, "");
      routeEntry0.toString();
      Object object0 = null;
      try {
        object0 = new Object();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.route.RouteEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      RouteEntry routeEntry1 = new RouteEntry(routeEntry0);
      HttpMethod httpMethod0 = HttpMethod.before;
      routeEntry1.path = "r(/";
      routeEntry1.matches(httpMethod0, "r(/");
      HttpMethod httpMethod1 = HttpMethod.patch;
      routeEntry1.httpMethod = httpMethod1;
      routeEntry1.toString();
      routeEntry1.matches(httpMethod1, "patch, r(/, null");
      routeEntry1.matches(httpMethod1, "spark.route.RouteEntry/");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      // Undeclared exception!
      try { 
        routeEntry0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.route.RouteEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.path = ", ";
      routeEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.delete;
      routeEntry0.matches(httpMethod0, "uAilIX,V?SZxfE*yF");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.put;
      HttpMethod httpMethod1 = HttpMethod.post;
      routeEntry0.httpMethod = httpMethod1;
      routeEntry0.matches(httpMethod0, (String) null);
      routeEntry0.toString();
      routeEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.acceptedType = "+/*paths";
      routeEntry0.acceptedType = "options";
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      routeEntry0.httpMethod = httpMethod0;
      RouteEntry routeEntry1 = new RouteEntry(routeEntry0);
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.toString();
      routeEntry0.toString();
      HttpMethod httpMethod1 = HttpMethod.delete;
      routeEntry0.matches(httpMethod1, "unsupported, null, null");
      routeEntry0.toString();
      routeEntry1.toString();
      routeEntry1.toString();
      HttpMethod httpMethod2 = HttpMethod.unsupported;
      routeEntry0.path = "";
      routeEntry1.matches(httpMethod2, "]`q m,UfD(y");
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.toString();
      // Undeclared exception!
      try { 
        routeEntry0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      RouteEntry routeEntry1 = new RouteEntry(routeEntry0);
      HttpMethod httpMethod0 = HttpMethod.after;
      routeEntry1.matches(httpMethod0, "");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "F:zOgGh`& pM";
      HttpMethod httpMethod0 = HttpMethod.patch;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.matches(httpMethod0, "Dx&qM_d(e");
      routeEntry0.matches(httpMethod0, "Dx&qM_d(e");
      HttpMethod httpMethod1 = HttpMethod.head;
      HttpMethod httpMethod2 = HttpMethod.put;
      routeEntry0.matches(httpMethod2, "*");
      routeEntry0.matches(httpMethod1, "delete");
      HttpMethod httpMethod3 = HttpMethod.unsupported;
      routeEntry0.matches(httpMethod3, "Dx&qM_d(e");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.path = "@}";
      routeEntry0.path = "";
      RouteEntry routeEntry1 = new RouteEntry(routeEntry0);
      Object object0 = routeEntry1.target;
      routeEntry1.target = null;
      routeEntry1.target = (Object) "";
      routeEntry1.toString();
      routeEntry0.toString();
      routeEntry1.toString();
      routeEntry0.toString();
      routeEntry1.toString();
      routeEntry1.matches(routeEntry0.httpMethod, "unsupported, , ");
      HttpMethod httpMethod1 = HttpMethod.options;
      routeEntry1.matches(httpMethod1, "$VALUES");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "/>a#V_b";
      HttpMethod httpMethod0 = HttpMethod.trace;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.matches(httpMethod0, ",ZSeaq}dyFc'D2");
      routeEntry0.target = (Object) httpMethod0;
      HttpMethod httpMethod1 = HttpMethod.delete;
      routeEntry0.httpMethod = httpMethod1;
      String string0 = "";
      HttpMethod httpMethod2 = HttpMethod.unsupported;
      routeEntry0.matches(httpMethod2, "`y");
      HttpMethod.valueOf("}");
      routeEntry0.matches(httpMethod0, string0);
      routeEntry0.toString();
      routeEntry0.toString();
      // Undeclared exception!
      try { 
        routeEntry0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant spark.route.HttpMethod.}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "/";
      HttpMethod httpMethod0 = HttpMethod.head;
      routeEntry0.matches(httpMethod0, "");
      HttpMethod httpMethod1 = HttpMethod.unsupported;
      routeEntry0.matches(httpMethod1, "");
      HttpMethod httpMethod2 = HttpMethod.after;
      routeEntry0.matches(httpMethod2, "");
      HttpMethod httpMethod3 = HttpMethod.before;
      routeEntry0.matches(httpMethod3, "/");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry((RouteEntry) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.before;
      routeEntry0.httpMethod = httpMethod0;
      HttpMethod httpMethod1 = HttpMethod.before;
      routeEntry0.target = (Object) httpMethod1;
      routeEntry0.path = "JBS\"xx>pjMf~i&";
      routeEntry0.matches(httpMethod1, "");
      routeEntry0.matches(httpMethod1, "&");
      HttpMethod httpMethod2 = HttpMethod.delete;
      routeEntry0.matches(httpMethod2, "&");
      routeEntry0.toString();
      HttpMethod httpMethod3 = HttpMethod.delete;
      routeEntry0.matches(httpMethod3, "");
      HttpMethod httpMethod4 = HttpMethod.head;
      routeEntry0.path = "";
      routeEntry0.matches(httpMethod4, "/");
      HttpMethod httpMethod5 = HttpMethod.after;
      routeEntry0.matches(httpMethod5, "");
      HttpMethod httpMethod6 = HttpMethod.before;
      routeEntry0.matches(httpMethod6, "before, JBS\"xx>pjMf~i&, before");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      routeEntry0.path = "connect";
      HttpMethod httpMethod0 = HttpMethod.trace;
      routeEntry0.httpMethod = httpMethod0;
      HttpMethod httpMethod1 = HttpMethod.delete;
      routeEntry0.acceptedType = "connect*";
      routeEntry0.path = ":r(";
      routeEntry0.matches(httpMethod1, "");
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.matches(httpMethod0, "spark.route.RouteEntry");
      routeEntry0.matches(httpMethod1, "ZkE[4SB~?H*");
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.toString();
      HttpMethod httpMethod2 = HttpMethod.connect;
      routeEntry0.matches(httpMethod2, "connect");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.put;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.path = "SvCa<xCUl`OFM<D;>";
      routeEntry0.toString();
      routeEntry0.path = "connect/";
      routeEntry0.matches(httpMethod0, "SvCa<xCUl`OFM<D;>");
      routeEntry0.toString();
      routeEntry0.matches(httpMethod0, "");
      HttpMethod httpMethod1 = HttpMethod.post;
      routeEntry0.acceptedType = ":";
      routeEntry0.matches(httpMethod1, "put, SvCa<xCUl`OFM<D;>, null");
      HttpMethod httpMethod2 = HttpMethod.connect;
      HttpMethod httpMethod3 = HttpMethod.trace;
      routeEntry0.matches(httpMethod3, "]@L");
      routeEntry0.toString();
      routeEntry0.matches(httpMethod2, "put, connect/, null");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      Object object0 = new Object();
      routeEntry0.path = "}I&2BznOHHg>*";
      routeEntry0.target = object0;
      HttpMethod httpMethod0 = HttpMethod.delete;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.toString();
      HttpMethod httpMethod1 = HttpMethod.head;
      routeEntry0.matches(httpMethod1, "}I&2BznOHHg>*");
      routeEntry0.target = object0;
      routeEntry0.toString();
      routeEntry0.toString();
      routeEntry0.toString();
      HttpMethod httpMethod2 = HttpMethod.unsupported;
      routeEntry0.matches(httpMethod2, "g`Svmi@u4ZBF");
      routeEntry0.matches(httpMethod2, "delete, }I&2BznOHHg>*, java.lang.Object@6c374bac");
      routeEntry0.matches(httpMethod2, "delete, }I&2BznOHHg>*, java.lang.Object@6c374bac");
      routeEntry0.toString();
      HttpMethod httpMethod3 = HttpMethod.get;
      routeEntry0.httpMethod = httpMethod2;
      routeEntry0.matches(httpMethod3, "delete, }I&2BznOHHg>*, java.lang.Object@6c374bac");
      routeEntry0.toString();
      routeEntry0.toString();
      HttpMethod httpMethod4 = HttpMethod.unsupported;
      routeEntry0.matches(httpMethod4, "%SkK9Q.2yhB:y");
      routeEntry0.toString();
      routeEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.unsupported;
      routeEntry0.httpMethod = httpMethod0;
      routeEntry0.path = "@}";
      routeEntry0.acceptedType = "c";
      routeEntry0.path = "";
      RouteEntry routeEntry1 = new RouteEntry(routeEntry0);
      Object object0 = routeEntry1.target;
      routeEntry1.target = null;
      routeEntry0.matches(httpMethod0, ":$r(/");
      routeEntry1.target = (Object) "";
      routeEntry1.toString();
      routeEntry0.toString();
      routeEntry1.toString();
      routeEntry0.toString();
      routeEntry1.toString();
      routeEntry1.matches(routeEntry0.httpMethod, "unsupported, , ");
      HttpMethod httpMethod1 = HttpMethod.options;
      routeEntry1.matches(httpMethod1, "$VALUES");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RouteEntry routeEntry0 = new RouteEntry();
      HttpMethod httpMethod0 = HttpMethod.get;
      routeEntry0.httpMethod = httpMethod0;
      RouteEntry routeEntry1 = new RouteEntry(routeEntry0);
      routeEntry1.toString();
      routeEntry0.toString();
      routeEntry1.target = (Object) routeEntry0;
      routeEntry0.path = ":r(/";
      routeEntry1.toString();
      HttpMethod httpMethod1 = HttpMethod.post;
      routeEntry1.matches(httpMethod1, "r");
      routeEntry0.matches(httpMethod0, ":r(/");
  }
}
