/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 22 02:06:00 GMT 2018
 */

package spark;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import javax.servlet.http.HttpSession;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.Request;
import spark.Session;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Session_ESTest extends Session_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(httpSession0).toString();
      doReturn((Object) null, (Object) null).when(httpSession0).getAttribute(anyString());
      doReturn((Enumeration) null).when(httpSession0).getAttributeNames();
      doReturn((String) null, (String) null).when(httpSession0).getId();
      doReturn(0L, 0L).when(httpSession0).getLastAccessedTime();
      doReturn(0, 0, 0, 0).when(httpSession0).getMaxInactiveInterval();
      doReturn(false, false, false, false, false).when(httpSession0).isNew();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.attribute("Gm~SR%hh|oA \"a^H", (Object) "Gm~SR%hh|oA \"a^H");
      session0.isNew();
      session0.maxInactiveInterval();
      session0.invalidate();
      session0.maxInactiveInterval();
      session0.isNew();
      session0.maxInactiveInterval((-3059));
      session0.id();
      session0.raw();
      session0.attribute("~LGAbvGshE6ii>");
      session0.lastAccessedTime();
      session0.isNew();
      session0.invalidate();
      session0.lastAccessedTime();
      session0.isNew();
      session0.id();
      session0.maxInactiveInterval(0);
      session0.attribute("WC.W");
      session0.raw();
      session0.isNew();
      session0.maxInactiveInterval();
      session0.maxInactiveInterval();
      session0.isNew();
      // Undeclared exception!
      try { 
        session0.attributes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Session", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(httpSession0).toString();
      doReturn((Object) null, (Object) null, (Object) null).when(httpSession0).getAttribute(anyString());
      doReturn((Enumeration) null).when(httpSession0).getAttributeNames();
      doReturn(0L, 0L, 0L, 0L).when(httpSession0).getCreationTime();
      doReturn(0L, 0L).when(httpSession0).getLastAccessedTime();
      doReturn(0).when(httpSession0).getMaxInactiveInterval();
      doReturn(false).when(httpSession0).isNew();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.attribute("session cannot be null");
      session0.lastAccessedTime();
      int int0 = 2192;
      session0.creationTime();
      session0.creationTime();
      session0.removeAttribute("I-sk{,UrZsL7");
      session0.maxInactiveInterval(2192);
      session0.isNew();
      session0.creationTime();
      session0.raw();
      session0.lastAccessedTime();
      session0.removeAttribute("I-sk{,UrZsL7");
      session0.raw();
      session0.attribute("E");
      session0.creationTime();
      session0.attribute(";Pn42arKn4Gfv?");
      session0.attribute("I-sk{,UrZsL7", (Object) null);
      session0.maxInactiveInterval();
      session0.maxInactiveInterval(1);
      // Undeclared exception!
      try { 
        session0.attributes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Session", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpSession0).toString();
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      doReturn((Enumeration) null).when(httpSession0).getAttributeNames();
      doReturn(0L).when(httpSession0).getCreationTime();
      doReturn((String) null).when(httpSession0).getId();
      doReturn(0L).when(httpSession0).getLastAccessedTime();
      doReturn(0, 0).when(httpSession0).getMaxInactiveInterval();
      doReturn(false, false).when(httpSession0).isNew();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.maxInactiveInterval();
      session0.lastAccessedTime();
      session0.isNew();
      session0.isNew();
      session0.invalidate();
      session0.maxInactiveInterval(0);
      session0.maxInactiveInterval();
      session0.id();
      session0.raw();
      session0.creationTime();
      String string0 = "";
      session0.attribute("");
      session0.attribute("", (Object) null);
      // Undeclared exception!
      try { 
        session0.attributes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Session", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(enumeration0).when(httpSession0).getAttributeNames();
      doReturn(false, false).when(httpSession0).isNew();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.isNew();
      session0.invalidate();
      session0.attribute("org.eclipse.jetty.util.component.ContainerLifeCycle", (Object) "org.eclipse.jetty.util.component.ContainerLifeCycle");
      session0.isNew();
      // Undeclared exception!
      try { 
        session0.attributes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpSession0).toString();
      doReturn(1L).when(httpSession0).getCreationTime();
      doReturn(" EL}e#X]#xa;*n39%n", "", "").when(httpSession0).getId();
      doReturn(0L).when(httpSession0).getLastAccessedTime();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.id();
      session0.attribute("OP}", (Object) "OP}");
      session0.id();
      session0.lastAccessedTime();
      session0.raw();
      session0.attribute("", (Object) "OP}");
      session0.creationTime();
      session0.id();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(2746L, 2746L).when(httpSession0).getLastAccessedTime();
      doReturn(684, (-23), 10).when(httpSession0).getMaxInactiveInterval();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.lastAccessedTime();
      session0.attribute("org.eclipse.jetty.servlet.MaxAge", (Object) "org.eclipse.jetty.servlet.MaxAge");
      session0.maxInactiveInterval();
      session0.attribute("l.xFqT8AG5Zd,K", (Object) "kh^ce$tzS;r!");
      session0.lastAccessedTime();
      session0.removeAttribute((String) null);
      session0.maxInactiveInterval();
      session0.invalidate();
      session0.maxInactiveInterval();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(httpSession0).getLastAccessedTime();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.maxInactiveInterval(0);
      session0.lastAccessedTime();
      session0.removeAttribute(" with lastsaved=");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpSession0).getAttribute(anyString());
      doReturn(0L).when(httpSession0).getCreationTime();
      doReturn("", "").when(httpSession0).getId();
      doReturn((-344)).when(httpSession0).getMaxInactiveInterval();
      doReturn(true).when(httpSession0).isNew();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.isNew();
      session0.invalidate();
      session0.id();
      session0.creationTime();
      session0.attribute("", (Object) "");
      session0.id();
      session0.maxInactiveInterval();
      session0.attribute("W~o?FTd");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((-5227)).when(httpSession0).getMaxInactiveInterval();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.maxInactiveInterval();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(httpSession0).getAttribute(anyString());
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.attribute("user-agent");
      HttpSession httpSession1 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(httpSession1).getAttribute(anyString());
      doReturn((String) null, "user-agent").when(httpSession1).getId();
      doReturn(0L, (-1739L)).when(httpSession1).getLastAccessedTime();
      Request request1 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session1 = new Session(httpSession1, request1);
      session1.removeAttribute("");
      session1.id();
      session1.maxInactiveInterval(561);
      session1.lastAccessedTime();
      session1.maxInactiveInterval((-1));
      session0.attribute((String) null);
      session1.lastAccessedTime();
      session1.attribute((String) null);
      session1.id();
      session1.invalidate();
      session1.attribute("a", (Object) "|");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((-854L)).when(httpSession0).getCreationTime();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.invalidate();
      session0.invalidate();
      session0.maxInactiveInterval(0);
      session0.creationTime();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(enumeration0).when(httpSession0).getAttributeNames();
      doReturn(0L).when(httpSession0).getLastAccessedTime();
      doReturn(0, 0).when(httpSession0).getMaxInactiveInterval();
      doReturn(false, false).when(httpSession0).isNew();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.isNew();
      session0.invalidate();
      session0.attribute("org.eclipse.jetty.util.component.ContainerLifeCycle", (Object) "org.eclipse.jetty.util.component.ContainerLifeCycle");
      session0.isNew();
      session0.attributes();
      session0.maxInactiveInterval();
      session0.lastAccessedTime();
      session0.maxInactiveInterval();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      doReturn(0L).when(httpSession0).getCreationTime();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.attribute(",lastNode=");
      session0.attribute("s6IyP]h.p:w)rY*SL% ", (Object) null);
      session0.creationTime();
      session0.attribute(",lastNode=", (Object) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.attribute("#A/GMns+K9gGFyOgrND");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(httpSession0).getAttributeNames();
      doReturn(0L, 0L).when(httpSession0).getLastAccessedTime();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.lastAccessedTime();
      session0.attribute("W'\",)3T3;tLS;|", (Object) "W'\",)3T3;tLS;|");
      session0.lastAccessedTime();
      session0.maxInactiveInterval(0);
      session0.removeAttribute("q}{*3`bS)|&oQ");
      // Undeclared exception!
      try { 
        session0.attributes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Session", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpSession0).getId();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.id();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.attribute((String) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = null;
      try {
        session0 = new Session((HttpSession) null, request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // session cannot be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpSession0).toString();
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      doReturn(enumeration0).when(httpSession0).getAttributeNames();
      doReturn((String) null).when(httpSession0).getId();
      doReturn(false).when(httpSession0).isNew();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.maxInactiveInterval(0);
      session0.attributes();
      session0.maxInactiveInterval((-1));
      session0.removeAttribute("]");
      session0.isNew();
      session0.maxInactiveInterval((-2178));
      session0.id();
      session0.attribute("");
      session0.removeAttribute("");
      session0.raw();
      session0.removeAttribute("o ");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      Enumeration<String> enumeration1 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(enumeration0).when(httpSession0).getAttributeNames();
      doReturn(true, false).when(httpSession0).isNew();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.invalidate();
      session0.isNew();
      session0.isNew();
      // Undeclared exception!
      try { 
        session0.attributes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(enumeration0).when(httpSession0).getAttributeNames();
      doReturn((-1L), 0L, 0L).when(httpSession0).getCreationTime();
      doReturn((String) null).when(httpSession0).getId();
      doReturn((-1L), (-1L), (-1L), 0L).when(httpSession0).getLastAccessedTime();
      doReturn(0).when(httpSession0).getMaxInactiveInterval();
      doReturn(true, false, false, false).when(httpSession0).isNew();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.isNew();
      session0.lastAccessedTime();
      session0.attribute((String) null, (Object) null);
      session0.lastAccessedTime();
      session0.lastAccessedTime();
      session0.creationTime();
      session0.attributes();
      session0.isNew();
      session0.removeAttribute((String) null);
      session0.id();
      session0.attribute("", (Object) "");
      session0.invalidate();
      session0.maxInactiveInterval();
      session0.maxInactiveInterval(0);
      session0.isNew();
      session0.attribute("Saving {} {}", (Object) "Saving {} {}");
      session0.creationTime();
      session0.isNew();
      session0.creationTime();
      session0.lastAccessedTime();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Session session0 = null;
      try {
        session0 = new Session((HttpSession) null, (Request) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // session cannot be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(httpSession0).getAttributeNames();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        session0.attributes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.Session", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(httpSession0).toString();
      doReturn(0L, 0L, 0L).when(httpSession0).getCreationTime();
      doReturn(0L, 0L, 0L).when(httpSession0).getLastAccessedTime();
      doReturn(0, 0, 0, 0).when(httpSession0).getMaxInactiveInterval();
      doReturn(false, false).when(httpSession0).isNew();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Session session0 = new Session(httpSession0, request0);
      session0.lastAccessedTime();
      session0.maxInactiveInterval();
      session0.maxInactiveInterval(628992000);
      session0.creationTime();
      session0.isNew();
      session0.maxInactiveInterval(628992000);
      session0.removeAttribute("");
      session0.raw();
      session0.creationTime();
      session0.maxInactiveInterval();
      session0.raw();
      session0.maxInactiveInterval(628992000);
      session0.creationTime();
      session0.lastAccessedTime();
      session0.maxInactiveInterval(0);
      session0.maxInactiveInterval();
      session0.maxInactiveInterval();
      session0.maxInactiveInterval(0);
      session0.invalidate();
      session0.lastAccessedTime();
      session0.isNew();
  }
}
