/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 22 02:03:15 GMT 2018
 */

package spark.servlet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.servlet.FilterConfig;
import javax.servlet.http.HttpServletRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.servlet.FilterTools;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FilterTools_ESTest extends FilterTools_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "lYq)@a3-C";
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn(".7").when(filterConfig0).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig0);
      FilterConfig filterConfig1 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        FilterTools.getFilterPath(filterConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The filterMappingUrlPattern must start with \"/\" and end with \"/*\". It's: .7
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = ") y;+6:Q|f";
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("3oF#k}rfg\tM?r6").when(httpServletRequest1).getContextPath();
      doReturn("0i").when(httpServletRequest1).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest1, ") y;+6:Q|f");
      FilterConfig filterConfig0 = null;
      FilterTools.getFilterPath(filterConfig0);
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        FilterTools.getRelativePath(httpServletRequest2, string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("vheA").when(httpServletRequest0).getContextPath();
      doReturn("//OW]Yt6&C\"*>yF8o0i").when(httpServletRequest0).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest0, "&byT-");
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig0).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig0);
      FilterConfig filterConfig1 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig1).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig1);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest1).getContextPath();
      doReturn((String) null).when(httpServletRequest1).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest1, "/Yt6&C\"*>yF8o0i");
      FilterConfig filterConfig2 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      FilterTools.getFilterPath(filterConfig2);
      FilterConfig filterConfig3 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig0).getInitParameter(anyString());
      FilterConfig filterConfig1 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig1).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig1);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletRequest0).getContextPath();
      doReturn("%a\"G~").when(httpServletRequest0).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest0, "");
      String string0 = FilterTools.getFilterPath(filterConfig0);
      FilterConfig filterConfig2 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("").when(filterConfig2).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig2);
      HttpServletRequest httpServletRequest1 = null;
      // Undeclared exception!
      try { 
        FilterTools.getRelativePath(httpServletRequest1, string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The filterMappingUrlPattern must start with \"/\" and end with \"/*\". It's: 
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "&";
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("&").when(httpServletRequest0).getContextPath();
      doReturn("&").when(httpServletRequest0).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest0, "&");
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("The filterMappingUrlPattern must start with \"/\" and end with \"/*\". It's: ").when(httpServletRequest1).getContextPath();
      doReturn("/").when(httpServletRequest1).getRequestURI();
      String string1 = "";
      FilterTools.getRelativePath(httpServletRequest1, "");
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("/AuK*`eU6j3fKx(rep").when(httpServletRequest0).getContextPath();
      doReturn("spark.servlet.MyApp").when(httpServletRequest0).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest0, "bV'L^i`G=Grfv,)pn");
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("/").when(filterConfig0).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig0);
      String string0 = "U<Ay";
      String string1 = "OW]Yt6&C\"*>yF8o0i";
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(httpServletRequest1).getContextPath();
      doReturn(string1).when(httpServletRequest1).getRequestURI();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "/~6N m;X";
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("/~6N m;X").when(filterConfig0).getInitParameter(anyString());
      // Undeclared exception!
      try { 
        FilterTools.getFilterPath(filterConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The filterMappingUrlPattern must start with \"/\" and end with \"/*\". It's: /~6N m;X
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig0).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getContextPath();
      doReturn((String) null).when(httpServletRequest0).getRequestURI();
      // Undeclared exception!
      try { 
        FilterTools.getRelativePath(httpServletRequest0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletRequest0).getContextPath();
      doReturn("/AuK*`eU6j3fKx(rep/*").when(httpServletRequest0).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest0, "O[_*$T`|ft");
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("/AuK*`eU6j3fKx(rep/*").when(filterConfig0).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig0);
      FilterConfig filterConfig1 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("AuK*`eU6j3fKx(rep/").when(filterConfig1).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("lYq)@a3-C").when(httpServletRequest0).getContextPath();
      doReturn("lYq)@a3-C").when(httpServletRequest0).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest0, "");
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("/*").when(filterConfig0).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig0);
      FilterConfig filterConfig1 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("+jNaw&b`s)hktPP%c").when(filterConfig1).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig1);
      String string0 = "%,gy\\x\"*Se]+";
      FilterConfig filterConfig2 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(filterConfig2).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig2);
      String string1 = "s";
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FilterTools.getRelativePath((HttpServletRequest) null, "f1|!u+_qlf*@Ab'GK:l");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getContextPath();
      doReturn((String) null).when(httpServletRequest0).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest0, "h");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FilterTools.getFilterPath((FilterConfig) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig0).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig0);
      FilterConfig filterConfig1 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig1).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig1);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getContextPath();
      doReturn((String) null).when(httpServletRequest0).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest0, "+,x177clxe0`E=8y");
      FilterConfig filterConfig2 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FilterConfig filterConfig0 = null;
      // Undeclared exception!
      try { 
        FilterTools.getFilterPath((FilterConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "^<.S|KxmPrwU]X1)";
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("^<.S|KxmPrwU]X1)").when(filterConfig0).getInitParameter(anyString());
      // Undeclared exception!
      try { 
        FilterTools.getFilterPath(filterConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The filterMappingUrlPattern must start with \"/\" and end with \"/*\". It's: ^<.S|KxmPrwU]X1)
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig0).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig0);
      String string0 = "AuK*`eU6j3fKx(rep";
      FilterConfig filterConfig1 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("AuK*`eU6j3fKx(rep").when(filterConfig1).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig1);
      FilterConfig filterConfig2 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(filterConfig2).getInitParameter(anyString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("/AuK*`eU6j3fKx(rep").when(httpServletRequest0).getContextPath();
      doReturn("ze+YY52'Y?kk@A").when(httpServletRequest0).getRequestURI();
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig0).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig0);
      FilterConfig filterConfig1 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig1).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig1);
      FilterTools.getRelativePath(httpServletRequest0, "spark.servlet.MyApp");
      FilterConfig filterConfig2 = null;
      FilterTools.getFilterPath(filterConfig2);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "/n\\NBo";
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("/nNBo").when(filterConfig0).getInitParameter(anyString());
      // Undeclared exception!
      try { 
        FilterTools.getFilterPath(filterConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The filterMappingUrlPattern must start with \"/\" and end with \"/*\". It's: /n\\NBo
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("lYq)@a3-C").when(httpServletRequest0).getContextPath();
      doReturn("lYq)@a3-C").when(httpServletRequest0).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest0, "");
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig0).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig0);
      FilterConfig filterConfig1 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig1).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig1);
      FilterConfig filterConfig2 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig2).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig2);
      FilterConfig filterConfig3 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig3).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig3);
      FilterConfig filterConfig4 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig4).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig4);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("spark.servlet.FilterTools").when(httpServletRequest0).getContextPath();
      doReturn("spark.servlet.FilterTools").when(httpServletRequest0).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest0, "Q6`PM!");
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest1).getContextPath();
      doReturn((String) null).when(httpServletRequest1).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest1, "/");
      FilterConfig filterConfig0 = null;
      // Undeclared exception!
      try { 
        FilterTools.getFilterPath(filterConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("/AuK*`eU6j3fKx(rep").when(httpServletRequest0).getContextPath();
      doReturn("spark.servlet.MyApp").when(httpServletRequest0).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest0, "bV'L^i`G=Grfv,)pn");
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig0).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest1).getContextPath();
      doReturn((String) null).when(httpServletRequest1).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest1, "c]U`9h*Jskum3B$a|A");
      FilterConfig filterConfig1 = null;
      FilterTools.getFilterPath(filterConfig1);
      HttpServletRequest httpServletRequest2 = null;
      String string0 = "LL*!";
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("/*").when(filterConfig0).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig0);
      HttpServletRequest httpServletRequest0 = null;
      FilterTools.getRelativePath((HttpServletRequest) null, "");
      String string0 = "guT/hgF6zZeV";
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("OI#.jd}Y.$&\"|7S>").when(httpServletRequest0).getContextPath();
      doReturn("OI#.jd}Y.$&\"|7S>").when(httpServletRequest0).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest0, "jfpnN<2.");
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("r~").when(httpServletRequest1).getContextPath();
      doReturn("r~").when(httpServletRequest1).getRequestURI();
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig0).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig0);
      FilterTools.getRelativePath(httpServletRequest1, "/");
      FilterConfig filterConfig1 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filterConfig1).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig1);
      FilterTools.getRelativePath((HttpServletRequest) null, "t/Vw,p7}?Ps'Op$ni");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("J&\"Mz&^a_e/I]").when(httpServletRequest0).getContextPath();
      doReturn("J&\"Mz&^a_e/I]").when(httpServletRequest0).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest0, "");
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletRequest1).getContextPath();
      doReturn("(zK;'it&Go%9w,K").when(httpServletRequest1).getRequestURI();
      FilterTools.getRelativePath(httpServletRequest1, "U^-D");
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      FilterTools.getFilterPath(filterConfig0);
      FilterConfig filterConfig1 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        FilterTools.getFilterPath(filterConfig1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"9w\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletRequest0).getContextPath();
      doReturn("/AuK*`eU6j3fKx(rep/*").when(httpServletRequest0).getRequestURI();
      String string0 = "O[_*$T`|ft";
      FilterTools.getRelativePath(httpServletRequest0, "O[_*$T`|ft");
      FilterConfig filterConfig0 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("/AuK*`eU6j3fKx(rep/*").when(filterConfig0).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig0);
      FilterConfig filterConfig1 = mock(FilterConfig.class, new ViolatedAssumptionAnswer());
      doReturn("AuK*`eU6j3fKx(rep/").when(filterConfig1).getInitParameter(anyString());
      FilterTools.getFilterPath(filterConfig1);
      FilterConfig filterConfig2 = null;
      // Undeclared exception!
      try { 
        FilterTools.getFilterPath(filterConfig2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The filterMappingUrlPattern must start with \"/\" and end with \"/*\". It's: AuK*`eU6j3fKx(rep/
         //
         verifyException("spark.servlet.FilterTools", e);
      }
  }
}
