/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Jun 22 02:06:01 GMT 2018
 */

package spark.http.matching;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class RouteContext_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "spark.http.matching.RouteContext"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/var/folders/_x/tfjywptd7r50k3bqzfvdz4pc0000gn/T/"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/Users/jhveras/evosuite/evosuite/plugins/jenkins/work/jobs/spark-jul-4-2016/workspace"); 
    java.lang.System.setProperty("user.home", "/Users/jhveras"); 
    java.lang.System.setProperty("user.language", "en"); 
    java.lang.System.setProperty("user.name", "jhveras"); 
    java.lang.System.setProperty("user.timezone", ""); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(RouteContext_ESTest_scaffolding.class.getClassLoader() ,
      "spark.route.Routes",
      "org.hsqldb.lib.FileUtil",
      "org.apache.oro.text.MalformedCachePatternException",
      "spark.Access",
      "spark.route.RouteEntry",
      "org.apache.oro.io.Perl5FilenameFilter",
      "org.apache.oro.text.regex.PatternMatcher",
      "spark.route.RouteOverview",
      "spark.serialization.SerializerChain",
      "spark.http.matching.RouteContext",
      "spark.utils.StringUtils",
      "spark.serialization.Serializer",
      "spark.Request",
      "spark.route.HttpMethod",
      "com.google.common.io.PatternFilenameFilter",
      "org.apache.oro.io.GlobFilenameFilter",
      "spark.utils.GzipUtils$StringMatch",
      "spark.http.matching.ResponseWrapper",
      "spark.http.matching.Body",
      "spark.serialization.DefaultSerializer",
      "spark.serialization.InputStreamSerializer",
      "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy",
      "org.apache.oro.text.PatternCache",
      "spark.QueryParamsMap",
      "org.apache.oro.text.regex.Pattern",
      "spark.Session",
      "org.hsqldb.lib.FileAccess",
      "org.apache.oro.io.AwkFilenameFilter",
      "com.thoughtworks.xstream.persistence.PersistenceStrategy",
      "org.apache.oro.text.regex.PatternCompiler",
      "spark.QueryParamsMap$NullQueryParamsMap",
      "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator",
      "spark.serialization.BytesSerializer",
      "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$ValidFilenameFilter",
      "spark.Response",
      "spark.routematch.RouteMatch",
      "org.hsqldb.lib.FileUtil$DatabaseFilenameFilter",
      "org.apache.oro.io.RegexFilenameFilter",
      "spark.http.matching.RequestWrapper"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(RouteContext_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "spark.http.matching.RouteContext",
      "spark.route.Routes",
      "spark.Request",
      "spark.http.matching.RequestWrapper",
      "spark.Response",
      "spark.http.matching.ResponseWrapper",
      "spark.utils.StringUtils",
      "spark.http.matching.Body",
      "spark.route.RouteOverview",
      "spark.serialization.SerializerChain",
      "spark.serialization.Serializer",
      "spark.serialization.DefaultSerializer",
      "spark.serialization.InputStreamSerializer",
      "spark.serialization.BytesSerializer",
      "spark.Access"
    );
  }
}
