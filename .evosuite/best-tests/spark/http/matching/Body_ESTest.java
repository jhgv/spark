/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 22 02:04:48 GMT 2018
 */

package spark.http.matching;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Enumeration;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.http.matching.Body;
import spark.serialization.SerializerChain;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Body_ESTest extends Body_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Body body0 = Body.create();
      body0.get();
      body0.set((Object) null);
      body0.get();
      Body body1 = Body.create();
      ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpServletResponse0).getContentType();
      doReturn(servletOutputStream0).when(httpServletResponse0).getOutputStream();
      doReturn(false).when(httpServletResponse0).isCommitted();
      doReturn((Collection) null).when(httpServletResponse0).getHeaders(anyString());
      SerializerChain serializerChain0 = mock(SerializerChain.class, new ViolatedAssumptionAnswer());
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(enumeration0).when(httpServletRequest0).getHeaders(anyString());
      // Undeclared exception!
      try { 
        body1.serializeTo(httpServletResponse0, serializerChain0, httpServletRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.GzipUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Body body0 = Body.create();
      body0.get();
      body0.isSet();
      body0.set((Object) null);
      boolean boolean0 = body0.notSet();
      assertTrue(boolean0);
      
      Body body1 = Body.create();
      body1.get();
      Body.create();
      Body.create();
      body0.set((Object) null);
      body0.set("");
      body0.isSet();
      body0.get();
      Body body2 = Body.create();
      Body.create();
      body2.set("");
      body0.get();
      body2.notSet();
      body0.get();
      body2.get();
      Body.create();
      boolean boolean1 = body2.isSet();
      assertFalse(body2.notSet());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Body body0 = Body.create();
      body0.set("");
      Object object0 = body0.get();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Body.create();
      Body body0 = Body.create();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getContentType();
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      doReturn(false).when(httpServletResponse0).isCommitted();
      SerializerChain serializerChain0 = null;
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(httpServletRequest0).getHeaders(anyString());
      // Undeclared exception!
      try { 
        body0.serializeTo(httpServletResponse0, (SerializerChain) null, httpServletRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Body body0 = Body.create();
      Body body1 = Body.create();
      body1.get();
      body0.set((Object) null);
      Body body2 = Body.create();
      body2.set(body0);
      boolean boolean0 = body0.isSet();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Body body0 = Body.create();
      ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getContentType();
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      doReturn(false).when(httpServletResponse0).isCommitted();
      HttpServletResponse httpServletResponse1 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(httpServletResponse1).isCommitted();
      SerializerChain serializerChain0 = mock(SerializerChain.class, new ViolatedAssumptionAnswer());
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Body.create();
      Body.create();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      body0.serializeTo(httpServletResponse1, serializerChain0, httpServletRequest0);
      SerializerChain serializerChain1 = mock(SerializerChain.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        body0.serializeTo(httpServletResponse0, serializerChain1, (HttpServletRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.GzipUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Body body0 = Body.create();
      body0.isSet();
      Body body1 = Body.create();
      body0.isSet();
      ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());
      body0.set(body1);
      SerializerChain serializerChain0 = mock(SerializerChain.class, new ViolatedAssumptionAnswer());
      body0.set(body1);
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Body body0 = Body.create();
      Body.create();
      body0.get();
      Body body1 = Body.create();
      body1.set((Object) null);
      body0.set((Object) null);
      body0.get();
      Body body2 = Body.create();
      body1.notSet();
      Body body3 = Body.create();
      Body body4 = Body.create();
      body4.get();
      body3.set((Object) null);
      ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(httpServletResponse0).isCommitted();
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      body1.serializeTo(httpServletResponse0, (SerializerChain) null, httpServletRequest0);
      body2.notSet();
      body0.get();
      body1.set("gzip");
      body3.get();
      HttpServletResponse httpServletResponse1 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse1).getContentType();
      doReturn((ServletOutputStream) null).when(httpServletResponse1).getOutputStream();
      doReturn(false).when(httpServletResponse1).isCommitted();
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(httpServletRequest1).getHeaders(anyString());
      // Undeclared exception!
      try { 
        body4.serializeTo(httpServletResponse1, (SerializerChain) null, httpServletRequest1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Body body0 = Body.create();
      ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());
      SerializerChain serializerChain0 = mock(SerializerChain.class, new ViolatedAssumptionAnswer());
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Body.create();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      body0.get();
      Body.create();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getContentType();
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      doReturn(false).when(httpServletResponse0).isCommitted();
      body0.set((Object) null);
      SerializerChain serializerChain1 = mock(SerializerChain.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        body0.serializeTo(httpServletResponse0, serializerChain1, (HttpServletRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.GzipUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Body body0 = Body.create();
      ServletOutputStream servletOutputStream0 = mock(ServletOutputStream.class, new ViolatedAssumptionAnswer());
      SerializerChain serializerChain0 = mock(SerializerChain.class, new ViolatedAssumptionAnswer());
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      body0.set(body0);
      Body body1 = Body.create();
      body0.set(body1);
      Body.create();
      Body body2 = (Body)body0.get();
      body2.set(serializerChain0);
      body0.set(body2);
      body0.isSet();
      body0.isSet();
      body0.notSet();
      body0.get();
      Body body3 = (Body)body0.get();
      body0.set(body3);
      body0.set((Object) null);
      Body body4 = Body.create();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletResponse0).getContentType();
      doReturn((ServletOutputStream) null).when(httpServletResponse0).getOutputStream();
      doReturn(false).when(httpServletResponse0).isCommitted();
      SerializerChain serializerChain1 = mock(SerializerChain.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(httpServletRequest1).getHeaders(anyString());
      // Undeclared exception!
      try { 
        body4.serializeTo(httpServletResponse0, serializerChain1, httpServletRequest1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }
}
