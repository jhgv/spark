/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 22 02:03:16 GMT 2018
 */

package spark.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.net.MalformedURLException;
import javax.servlet.http.HttpServletRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import spark.resource.JarResourceHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JarResourceHandler_ESTest extends JarResourceHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("", "");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("", (Object) null, (Object) null).when(httpServletRequest0).getAttribute(anyString());
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      try { 
        jarResourceHandler0.getResource(httpServletRequest1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // 
         //
         verifyException("spark.resource.JarResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("C/", "C/");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest1).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest1).getPathInfo();
      doReturn((String) null).when(httpServletRequest1).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest1);
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("", "");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn("/jN/jN/jfYrN/").when(httpServletRequest0).getPathInfo();
      doReturn((String) null).when(httpServletRequest0).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest2).getAttribute(anyString());
      doReturn("c~(n*\"8").when(httpServletRequest2).getPathInfo();
      doReturn("").when(httpServletRequest2).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest2);
      HttpServletRequest httpServletRequest3 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest3).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest3).getPathInfo();
      doReturn((String) null).when(httpServletRequest3).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest3);
      HttpServletRequest httpServletRequest4 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      jarResourceHandler0.getResource(httpServletRequest4);
      jarResourceHandler0.getResource(httpServletRequest1);
      HttpServletRequest httpServletRequest5 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("@R.tDnl5 s(*r", "x");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("@R.tDnl5 s(*r", (Object) null, (Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest0).getPathInfo();
      doReturn((String) null).when(httpServletRequest0).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      jarResourceHandler0.getResource(httpServletRequest1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("", "");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn("/jN/jN/jfYrN/").when(httpServletRequest0).getPathInfo();
      doReturn((String) null).when(httpServletRequest0).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(httpServletRequest2).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest2).getPathInfo();
      doReturn("<UjWyu-vN!BrkWe7").when(httpServletRequest2).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest2);
      HttpServletRequest httpServletRequest3 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      jarResourceHandler0.getResource(httpServletRequest3);
      jarResourceHandler0.getResource(httpServletRequest1);
      HttpServletRequest httpServletRequest4 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      try { 
        jarResourceHandler0.getResource(httpServletRequest4);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // <UjWyu-vN!BrkWe7
         //
         verifyException("spark.resource.JarResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("javax.servlet.include.request_uri", "javax.servlet.include.request_uri");
      jarResourceHandler0.getResource((HttpServletRequest) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("", "");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest0).getPathInfo();
      doReturn((String) null).when(httpServletRequest0).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("", "");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest2).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest2).getPathInfo();
      doReturn((String) null).when(httpServletRequest2).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest2);
      HttpServletRequest httpServletRequest3 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      try { 
        jarResourceHandler0.getResource(httpServletRequest3);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.JarResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("E", "E");
      jarResourceHandler0.getResource((HttpServletRequest) null);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler((String) null, "lTq9vRb4Lnx!&P]Ud");
      HttpServletRequest httpServletRequest0 = null;
      // Undeclared exception!
      try { 
        jarResourceHandler0.getResource(httpServletRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("o", "o");
      JarResourceHandler jarResourceHandler1 = new JarResourceHandler("o", "/'w'E6)Gi.3u_HpFg/'w'E6)Gi.3u_HpFg");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(jarResourceHandler1, (Object) null).when(httpServletRequest0).getAttribute(anyString());
      jarResourceHandler0.getResource(httpServletRequest0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("@R.tDnl5 s(*r", "x");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("@R.tDnl5 s(*r", (Object) null, (Object) null).when(httpServletRequest0).getAttribute(anyString());
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      jarResourceHandler0.getResource(httpServletRequest1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("", "");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn(":").when(httpServletRequest0).getPathInfo();
      doReturn("").when(httpServletRequest0).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      jarResourceHandler0.getResource(httpServletRequest1);
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("(\"P:p)zA<IP+O-|_", "(\"P:p)zA<IP+O-|_");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(jarResourceHandler0, (Object) null).when(httpServletRequest1).getAttribute(anyString());
      jarResourceHandler0.getResource(httpServletRequest1);
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest2 = null;
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("@R.tDnl5 s(*r", "x");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("@R.tDnl5 s(*r", "x", "@R.tDnl5 s(*r").when(httpServletRequest0).getAttribute(anyString());
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      jarResourceHandler0.getResource(httpServletRequest1);
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("", "");
      JarResourceHandler jarResourceHandler1 = new JarResourceHandler("", "@");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(jarResourceHandler1, (Object) null, (Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest0).getPathInfo();
      doReturn((String) null).when(httpServletRequest0).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      jarResourceHandler1.getResource(httpServletRequest1);
      HttpServletRequest httpServletRequest2 = null;
      try { 
        jarResourceHandler0.getResource(httpServletRequest2);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.JarResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("/jN", "42");
      JarResourceHandler jarResourceHandler1 = new JarResourceHandler("/jN", "Q");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(jarResourceHandler1, "/jN", (Object) null).when(httpServletRequest0).getAttribute(anyString());
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest1).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest1).getPathInfo();
      doReturn((String) null).when(httpServletRequest1).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest1);
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest3 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest4 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      try { 
        jarResourceHandler0.getResource(httpServletRequest4);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.JarResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("<Kw0fq[iX", "<Kw0fq[iX");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("<Kw0fq[iX", (Object) null, "<Kw0fq[iX").when(httpServletRequest0).getAttribute(anyString());
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      jarResourceHandler0.getResource(httpServletRequest1);
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("n,Vk&R%Koy3$", "n,Vk&R%Koy3$");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("n,Vk&R%Koy3$", (Object) null, "o<").when(httpServletRequest0).getAttribute(anyString());
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      jarResourceHandler0.getResource(httpServletRequest1);
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      try { 
        jarResourceHandler0.getResource(httpServletRequest2);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // o<
         //
         verifyException("spark.resource.JarResourceHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("", "");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn("/jN/jN/jfYrN/").when(httpServletRequest0).getPathInfo();
      doReturn((String) null).when(httpServletRequest0).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest2).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest2).getPathInfo();
      doReturn((String) null).when(httpServletRequest2).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest2);
      HttpServletRequest httpServletRequest3 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      jarResourceHandler0.getResource(httpServletRequest3);
      jarResourceHandler0.getResource(httpServletRequest1);
      HttpServletRequest httpServletRequest4 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JarResourceHandler jarResourceHandler0 = new JarResourceHandler("", "");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn("/jN/jN/`W:jfYrN").when(httpServletRequest0).getPathInfo();
      doReturn((String) null).when(httpServletRequest0).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest2).getAttribute(anyString());
      doReturn("/").when(httpServletRequest2).getPathInfo();
      doReturn("/").when(httpServletRequest2).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest2);
      HttpServletRequest httpServletRequest3 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpServletRequest3).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest3).getPathInfo();
      doReturn((String) null).when(httpServletRequest3).getServletPath();
      jarResourceHandler0.getResource(httpServletRequest3);
      HttpServletRequest httpServletRequest4 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      jarResourceHandler0.getResource(httpServletRequest4);
      jarResourceHandler0.getResource(httpServletRequest1);
      HttpServletRequest httpServletRequest5 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      try { 
        jarResourceHandler0.getResource(httpServletRequest5);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.JarResourceHandler", e);
      }
  }
}
