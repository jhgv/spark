/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 22 02:03:15 GMT 2018
 */

package spark.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import spark.resource.ClassPathResource;
import spark.resource.ExternalResource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractFileResolvingResource_ESTest extends AbstractFileResolvingResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      URLConnection uRLConnection1 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ExternalResource externalResource0 = new ExternalResource("");
      externalResource0.getDescription();
      externalResource0.lastModified();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("~9;_J3)-W4'Asd-");
      externalResource0.contentLength();
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      externalResource0.customizeConnection(uRLConnection0);
      externalResource0.getURL();
      externalResource0.exists();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("~9;_J3)-W4'Asd-");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "~9;_J3)-W4'Asd-");
      externalResource0.isReadable();
      externalResource0.toString();
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      URLConnection uRLConnection1 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      HttpURLConnection httpURLConnection1 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      externalResource0.getInputStream();
      externalResource0.customizeConnection(httpURLConnection1);
      externalResource0.isDirectory();
      externalResource0.lastModified();
      externalResource0.createRelative("");
      externalResource0.isReadable();
      try { 
        externalResource0.getURL();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Cannot create a relative resource for external resource [/Users/jhveras/evosuite/evosuite/plugins/jenkins/work/jobs/spark-jul-4-2016/workspace/~9;_J3)-W4'Asd-]
         //
         verifyException("spark.resource.AbstractResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("0NJBtB/");
      classPathResource0.isReadable();
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      classPathResource0.toString();
      classPathResource0.customizeConnection(uRLConnection0);
      classPathResource0.lastModified();
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      URLConnection uRLConnection1 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ExternalResource externalResource0 = new ExternalResource("");
      externalResource0.isReadable();
      externalResource0.customizeConnection(uRLConnection0);
      externalResource0.getFilename();
      externalResource0.getPath();
      externalResource0.lastModified();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      classPathResource0.contentLength();
      ClassPathResource classPathResource1 = new ClassPathResource("");
      classPathResource0.exists();
      classPathResource0.exists();
      classPathResource1.isReadable();
      classPathResource0.getURL();
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      classPathResource1.customizeConnection(httpURLConnection0);
      classPathResource0.customizeConnection(httpURLConnection0);
      classPathResource0.getURL();
      classPathResource0.getFileForLastModifiedCheck();
      classPathResource0.lastModified();
      try { 
        classPathResource0.getInputStream();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [] cannot be resolved in the file system for resolving its last-modified timestamp
         //
         verifyException("spark.resource.AbstractResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("Ap]Fu ");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = " cannot be resolved in the file system for resolving its last-modified timestamp";
      ClassPathResource classPathResource0 = new ClassPathResource(" cannot be resolved in the file system for resolving its last-modified timestamp");
      try { 
        classPathResource0.getFile();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [ cannot be resolved in the file system for resolving its last-modified timestamp] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("RGYZ$x`UQ");
      externalResource0.getURI();
      externalResource0.getFilename();
      externalResource0.isReadable();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("$h8e/t");
      externalResource0.contentLength();
      externalResource0.getPath();
      externalResource0.getPath();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource("");
      externalResource0.toString();
      externalResource0.getFile();
      externalResource0.isReadable();
      externalResource0.getFileForLastModifiedCheck();
      externalResource0.getDescription();
      externalResource0.exists();
      externalResource0.exists();
      externalResource0.contentLength();
      externalResource0.getDescription();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("/");
      classPathResource0.toString();
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      classPathResource0.customizeConnection(uRLConnection0);
      URLConnection uRLConnection1 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      classPathResource0.customizeConnection(uRLConnection1);
      classPathResource0.getDescription();
      classPathResource0.getFileForLastModifiedCheck();
      classPathResource0.getFileForLastModifiedCheck();
      classPathResource0.getFile();
      classPathResource0.exists();
      classPathResource0.contentLength();
      ExternalResource externalResource0 = new ExternalResource("/");
      externalResource0.isDirectory();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource(" cannot be opened because it does not exist");
      classPathResource0.lastModified();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "spark.resource.AbstractFileResolvingResource";
      ExternalResource externalResource0 = new ExternalResource("spark.resource.AbstractFileResolvingResource");
      externalResource0.getDescription();
      externalResource0.toString();
      try { 
        externalResource0.lastModified();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // external resource [/Users/jhveras/evosuite/evosuite/plugins/jenkins/work/jobs/spark-jul-4-2016/workspace/spark.resource.AbstractFileResolvingResource] cannot be resolved in the file system for resolving its last-modified timestamp
         //
         verifyException("spark.resource.AbstractResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      classPathResource0.exists();
      classPathResource0.contentLength();
      classPathResource0.createRelative("");
      classPathResource0.getInputStream();
      classPathResource0.lastModified();
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("spark.resource.AbstractFileResolvingResource");
      classPathResource0.exists();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("jar:", (ClassLoader) null);
      classPathResource0.isReadable();
      classPathResource0.isReadable();
      classPathResource0.getFilename();
      classPathResource0.getInputStream();
      classPathResource0.getFileForLastModifiedCheck();
      try { 
        classPathResource0.getFileForLastModifiedCheck();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [jar:] cannot be opened because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "";
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0, class0);
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      classPathResource0.customizeConnection(uRLConnection0);
      classPathResource0.exists();
      try { 
        classPathResource0.getFile();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [java/lang/] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      Class<Integer> class0 = Integer.class;
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0, class0);
      classPathResource0.getFileForLastModifiedCheck();
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("spark.resource.AbstractFileResolvingResource");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ExternalResource externalResource0 = new ExternalResource("spark.resource.AbstractFileResolvingResource");
      externalResource0.getDescription();
      externalResource0.toString();
      externalResource0.lastModified();
      externalResource0.contentLength();
      externalResource0.getURI();
      externalResource0.contentLength();
      externalResource0.getFileForLastModifiedCheck();
      externalResource0.getURL();
      ClassPathResource classPathResource0 = new ClassPathResource("spark.resource.AbstractFileResolvingResource");
      classPathResource0.exists();
      classPathResource0.getDescription();
      classPathResource0.getFile();
      // Undeclared exception!
      try { 
        classPathResource0.getPath();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // class path resource [spark.resource.AbstractFileResolvingResource] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExternalResource externalResource0 = new ExternalResource(">eFS<TpE[A");
      externalResource0.toString();
      externalResource0.getURI();
      externalResource0.getDescription();
      ClassPathResource classPathResource0 = new ClassPathResource("");
      classPathResource0.getDescription();
      classPathResource0.getURL();
      classPathResource0.getPath();
      externalResource0.contentLength();
      classPathResource0.customizeConnection((HttpURLConnection) null);
      classPathResource0.lastModified();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      doReturn((URL) null).when(classLoader0).getResource(anyString());
      ClassPathResource classPathResource0 = new ClassPathResource("HEAD", classLoader0);
      classPathResource0.contentLength();
      // Undeclared exception!
      try { 
        classPathResource0.exists();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // class path resource [HEAD] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.resource.ClassPathResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      classPathResource0.isReadable();
      String string0 = classPathResource0.getDescription();
      classPathResource0.isReadable();
      classPathResource0.isReadable();
      classPathResource0.toString();
      classPathResource0.getInputStream();
      classPathResource0.getURI();
      classPathResource0.contentLength();
      classPathResource0.getInputStream();
      classPathResource0.customizeConnection((HttpURLConnection) null);
      ExternalResource externalResource0 = new ExternalResource(string0);
      // Undeclared exception!
      try { 
        externalResource0.getInputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.resource.AbstractFileResolvingResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      Class<String> class0 = String.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      classPathResource0.getFile();
      // Undeclared exception!
      try { 
        classPathResource0.getFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("r1DR%h{Z}+;Asy", (ClassLoader) null);
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      classPathResource0.customizeConnection(httpURLConnection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      ClassLoader classLoader0 = mock(ClassLoader.class, new ViolatedAssumptionAnswer());
      Class<Integer> class0 = Integer.class;
      ClassPathResource classPathResource0 = new ClassPathResource("", classLoader0, class0);
      URLConnection uRLConnection0 = null;
      classPathResource0.exists();
      // Undeclared exception!
      try { 
        classPathResource0.customizeConnection((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("target/test-classes");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      ClassPathResource classPathResource0 = new ClassPathResource("");
      classPathResource0.getPath();
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      classPathResource0.getURL();
      classPathResource0.exists();
      classPathResource0.customizeConnection(uRLConnection0);
      classPathResource0.getFileForLastModifiedCheck();
      classPathResource0.contentLength();
      classPathResource0.getFileForLastModifiedCheck();
      classPathResource0.contentLength();
      classPathResource0.exists();
      ExternalResource externalResource0 = new ExternalResource("");
      externalResource0.getInputStream();
      // Undeclared exception!
      try { 
        externalResource0.getDescription();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("target/test-classes");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "file:");
      ClassPathResource classPathResource0 = new ClassPathResource("");
      classPathResource0.isReadable();
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      classPathResource0.toString();
      classPathResource0.customizeConnection(uRLConnection0);
      classPathResource0.createRelative("class path resource []");
      ExternalResource externalResource0 = new ExternalResource("");
      externalResource0.getFilename();
      externalResource0.getPath();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      classPathResource0.exists();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Integer> class0 = Integer.class;
      classLoader0.setDefaultAssertionStatus(true);
      classLoader0.getParent();
      classLoader0.getParent();
      ClassPathResource classPathResource0 = new ClassPathResource((String) null, classLoader0, class0);
      classPathResource0.getPath();
      classPathResource0.contentLength();
      classPathResource0.getFileForLastModifiedCheck();
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Cannot create a relative resource for ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "No such entry: ");
      ExternalResource externalResource0 = new ExternalResource("Cannot create a relative resource for ");
      externalResource0.lastModified();
      externalResource0.lastModified();
      externalResource0.getFile();
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      externalResource0.getInputStream();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassPathResource classPathResource0 = new ClassPathResource("");
      classPathResource0.contentLength();
      ClassPathResource classPathResource1 = new ClassPathResource("");
      classPathResource0.exists();
      classPathResource0.exists();
      classPathResource0.getURL();
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      classPathResource1.customizeConnection(httpURLConnection0);
      classPathResource0.customizeConnection(httpURLConnection0);
      classPathResource0.getURL();
      classPathResource0.getFileForLastModifiedCheck();
      classPathResource0.lastModified();
      try { 
        classPathResource0.getInputStream();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [] cannot be resolved in the file system for resolving its last-modified timestamp
         //
         verifyException("spark.resource.AbstractResource", e);
      }
  }
}
