/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 22 02:04:40 GMT 2018
 */

package spark.embeddedserver.jetty;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.eclipse.jetty.server.Server;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.embeddedserver.jetty.JettyServer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JettyServer_ESTest extends JettyServer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Server server0 = JettyServer.create(200, 200, 0);
      assertEquals("9.3.z-SNAPSHOT", server0.getVersion());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Server server0 = JettyServer.create(1324, 60000, 60000);
      assertFalse(server0.isStopping());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Server server0 = JettyServer.create(122, 0, 122);
      assertEquals("9.3.z-SNAPSHOT", server0.getVersion());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Server server0 = JettyServer.create(0, 122, (-237));
      assertEquals("STOPPED", server0.getState());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      JettyServer.create(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Server server0 = JettyServer.create(2807, (-52), (-52));
      assertEquals("STOPPED", server0.getState());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Server server0 = JettyServer.create((-52), 2807, 2807);
      assertFalse(server0.isStopping());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JettyServer jettyServer0 = new JettyServer();
  }
}
