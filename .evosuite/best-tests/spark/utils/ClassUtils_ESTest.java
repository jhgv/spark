/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 22 02:03:14 GMT 2018
 */

package spark.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import spark.utils.ClassUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassUtils_ESTest extends ClassUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("[L", classLoader0);
      Class<RuntimeException> class0 = RuntimeException.class;
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassUtils.resolvePrimitiveClassName((String) null);
      ClassUtils.resolvePrimitiveClassName((String) null);
      ClassUtils.getDefaultClassLoader();
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.forName((String) null, classLoader0);
      String string0 = "JTD xFK4~RE!";
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassLoader classLoader0 = null;
      ClassUtils.forName("", (ClassLoader) null);
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("[]", classLoader0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtils.classPackageAsResourcePath(class0);
      ClassUtils.getDefaultClassLoader();
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("Zp&(D^0.s_rM", classLoader0);
      // Undeclared exception!
      try { 
        ClassUtils.getDefaultClassLoader();
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassUtils.getDefaultClassLoader();
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.resolvePrimitiveClassName("[Lspark.utils.ClassUtils;");
      ClassUtils.resolvePrimitiveClassName("[Lspark.utils.ClassUtils;");
      ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("[Lspark.utils.ClassUtils;", classLoader0);
      ClassUtils.resolvePrimitiveClassName("[Lspark.utils.ClassUtils;");
      ClassUtils.getDefaultClassLoader();
      ClassUtils.getDefaultClassLoader();
      ClassUtils.resolvePrimitiveClassName("[Lspark.utils.ClassUtils;");
      ClassUtils.resolvePrimitiveClassName("spark.utils.ClassUtils");
      ClassLoader classLoader1 = ClassUtils.getDefaultClassLoader();
      ClassUtils.classPackageAsResourcePath((Class<?>) null);
      Class<Long> class0 = Long.class;
      ClassUtils.classPackageAsResourcePath(class0);
      ClassUtils.forName("-[", classLoader1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = ClassUtils.ARRAY_SUFFIX;
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtils.classPackageAsResourcePath(class0);
      ClassUtils.resolvePrimitiveClassName("java/lang");
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      String string0 = "Name must not be null";
      ClassUtils.resolvePrimitiveClassName("Name must not be null");
      ClassUtils.forName("[spark.utils.ClassUtils", classLoader0);
      ClassUtils.forName("},t+", classLoader0);
      ClassUtils.resolvePrimitiveClassName(string0);
      String string1 = "E9*iVvPU=^";
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "BJXx,mq[3W]";
      ClassUtils.resolvePrimitiveClassName("BJXx,mq[3W]");
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      try { 
        ClassUtils.forName("BJXx,mq[3W]", classLoader0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassLoader classLoader1 = ClassUtils.getDefaultClassLoader();
      Class<?> class0 = ClassUtils.forName("spark.utils.Assert[]", classLoader0);
      ClassUtils.getDefaultClassLoader();
      Class<Character> class1 = Character.class;
      ClassUtils.classPackageAsResourcePath(class1);
      ClassUtils.resolvePrimitiveClassName("[]");
      Class<?> class2 = ClassUtils.resolvePrimitiveClassName("[Assertion failed] - this argument is required; it must not be null");
      ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("[c", classLoader1);
      String string0 = "o)o376#p+&^Ry*G?(W`";
      ClassUtils.forName(string0, classLoader1);
      ClassUtils.classPackageAsResourcePath(class0);
      // Undeclared exception!
      try { 
        ClassUtils.classPackageAsResourcePath(class2);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<?> class0 = ClassUtils.resolvePrimitiveClassName("[LO,sAQf.MxF");
      ClassUtils.resolvePrimitiveClassName("[LO,sAQf.MxF");
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("[LO,sAQf.MxF", classLoader0);
      // Undeclared exception!
      try { 
        ClassUtils.classPackageAsResourcePath(class0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.resolvePrimitiveClassName("h)");
      ClassUtils.resolvePrimitiveClassName("q3");
      String string0 = "\\O(1aUIoG";
      ClassUtils.forName("O(1aUIoG", classLoader0);
      String string1 = "66bn;h=#0e%~S<00{";
      // Undeclared exception!
      try { 
        ClassUtils.resolvePrimitiveClassName(string1);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtils.classPackageAsResourcePath(class0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassUtils.resolvePrimitiveClassName("");
      ClassUtils.classPackageAsResourcePath((Class<?>) null);
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("*WLIdt!4v2[mN-~Vgl", classLoader0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      try { 
        ClassUtils.forName("", classLoader0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtils.classPackageAsResourcePath(class0);
      ClassUtils.classPackageAsResourcePath(class0);
      ClassUtils.resolvePrimitiveClassName("tL2nAm$}");
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("tL2nAm$}", classLoader0);
      String string0 = "";
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassUtils.resolvePrimitiveClassName("x;A3");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassUtils.resolvePrimitiveClassName("spark.utils.ClassUtils");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "M\\Tc.1p|S,wk4";
      ClassUtils.resolvePrimitiveClassName("MTc.1p|S,wk4");
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      try { 
        ClassUtils.forName("MTc.1p|S,wk4", classLoader0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassUtils.forName("~^N'69xF_4^TW;c+0EV", (ClassLoader) null);
      String string0 = "c/PA2Ct!dd4b";
      // Undeclared exception!
      try { 
        ClassUtils.resolvePrimitiveClassName(string0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = null;
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      // Undeclared exception!
      try { 
        ClassUtils.forName((String) null, classLoader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("spark.utils.ClassUtils", classLoader0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "!N\\-%2T4JrUN\\RC";
      ClassUtils.resolvePrimitiveClassName("!N-%2T4JrUNRC");
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("[]", classLoader0);
      // Undeclared exception!
      try { 
        ClassUtils.resolvePrimitiveClassName(string0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("[[]", classLoader0);
      Class<Byte> class0 = Byte.class;
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassUtils.getDefaultClassLoader();
      ClassUtils.resolvePrimitiveClassName("[L");
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("[][]", classLoader0);
      String string0 = "[L[Lspark.utils.ClassUtils";
      // Undeclared exception!
      try { 
        ClassUtils.resolvePrimitiveClassName(string0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("[Lspark.utils.ClassUtils;", classLoader0);
      ClassLoader classLoader1 = ClassUtils.getDefaultClassLoader();
      ClassLoader classLoader2 = ClassUtils.getDefaultClassLoader();
      ClassUtils.resolvePrimitiveClassName("[Lspark.utils.ClassUtils;");
      ClassUtils.resolvePrimitiveClassName("[Lspark.utils.ClassUtils;");
      ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("[Lspark.utils.ClassUtils;", classLoader2);
      ClassUtils.resolvePrimitiveClassName("[Lspark.utils.ClassUtils;");
      String string0 = "9/iUrZ9";
      ClassUtils.forName("9/iUrZ9", classLoader1);
      // Undeclared exception!
      try { 
        ClassUtils.getDefaultClassLoader();
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtils.classPackageAsResourcePath(class0);
      ClassUtils.resolvePrimitiveClassName("java/lang");
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      String string0 = "Name must not be null";
      ClassUtils.resolvePrimitiveClassName("Name must not be null");
      ClassUtils.forName("[spark.utils.ClassUtils", classLoader0);
      Class<Long> class1 = Long.class;
      String string1 = ClassUtils.classPackageAsResourcePath(class1);
      ClassUtils.forName("},t+", classLoader0);
      ClassUtils.resolvePrimitiveClassName(string0);
      try { 
        ClassUtils.forName(string1, classLoader0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtils.classPackageAsResourcePath(class0);
      ClassUtils.classPackageAsResourcePath(class0);
      ClassUtils.resolvePrimitiveClassName("\"@{6Wt#");
      ClassLoader classLoader0 = ClassUtils.getDefaultClassLoader();
      ClassUtils.classPackageAsResourcePath(class0);
      ClassLoader classLoader1 = ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("spark.utils.Assert[]", classLoader0);
      ClassUtils.getDefaultClassLoader();
      Class<Character> class1 = Character.class;
      ClassUtils.classPackageAsResourcePath(class1);
      ClassUtils.resolvePrimitiveClassName("[]");
      ClassUtils.getDefaultClassLoader();
      Class<?> class2 = ClassUtils.resolvePrimitiveClassName("[Assertion failed] - this argument is required; it must not be null");
      Class<Object> class3 = Object.class;
      ClassUtils.classPackageAsResourcePath(class3);
      ClassUtils.resolvePrimitiveClassName("[Assertion failed] - this argument is required; it must not be null");
      ClassUtils.getDefaultClassLoader();
      ClassUtils.forName("[c", classLoader1);
      String string0 = "o)o376#p+&^Ry*G?(W`";
      ClassUtils.forName(string0, classLoader1);
      ClassUtils.classPackageAsResourcePath(class2);
  }
}
