/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 22 00:53:53 GMT 2018
 */

package spark.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import spark.utils.ResourceUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResourceUtils_ESTest extends ResourceUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = "]";
      URL uRL1 = MockURL.URL(uRL0, "]", (URLStreamHandler) null);
      URL uRL2 = ResourceUtils.extractJarFileURL(uRL1);
      ResourceUtils.isJarURL(uRL2);
      ResourceUtils.extractJarFileURL(uRL2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        ResourceUtils.toURI(uRL1);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 32: file://some/fake/but/wellformed/]
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "xt(";
      ResourceUtils.getFile("xt(");
      ResourceUtils.toURI("xt(");
      String string1 = "[Assertion failed] - this argument is required; it must not be null";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("xt(", "N^A)A@Dx{|o5|%a", 0, "[Assertion failed] - this argument is required; it must not be null", uRLStreamHandler0);
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.isJarURL(uRL0);
      // Undeclared exception!
      try { 
        ResourceUtils.toURI(uRL1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResourceUtils.getFile("classpath:");
      ResourceUtils.getFile("classpath:");
      URL uRL0 = MockURL.getFileExample();
      ResourceUtils.extractJarFileURL(uRL0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      URI uRI0 = MockURI.aFTPURI;
      try { 
        ResourceUtils.getFile(uRI0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // URI cannot be resolved to absolute file path because it does not reside in the file system: ftp://foo.bar
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("&Bwm7CO4'mZg");
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ResourceUtils.useCachesIfNecessary(uRLConnection0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("&Bwm7CO4'mZg");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      URI uRI0 = ResourceUtils.toURI(uRL0);
      ResourceUtils.getFile(uRI0);
      ResourceUtils.isUrl("&Bwm7CO4'mZg");
      ResourceUtils.getFile("");
      URL uRL1 = ResourceUtils.getURL("");
      ResourceUtils.isFileURL(uRL1);
      ResourceUtils.getFile(uRL1);
      URI uRI1 = ResourceUtils.toURI(uRL0);
      ResourceUtils.getFile(uRI0);
      ResourceUtils.getFile(uRI1);
      ResourceUtils.getFile(uRI1, "");
      ResourceUtils.isFileURL(uRL0);
      URL uRL2 = ResourceUtils.getURL("");
      ResourceUtils.getFile(uRL1, "");
      ResourceUtils.getURL("");
      ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.getFile(uRI0);
      ResourceUtils.getFile(uRL2);
      ResourceUtils.getFile(uRL0);
      ResourceUtils.getFile(uRI1, "&Bwm7CO4'mZg");
      ResourceUtils.getFile(uRL2, "AezP");
      URL uRL3 = ResourceUtils.extractJarFileURL(uRL1);
      ResourceUtils.getFile(uRL3, "}yrangG^F~8's)bsE");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("~^aQ~p<ZEkf<w,;>f");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "~^aQ~p<ZEkf<w,;>f");
      ResourceUtils.getFile("~^aQ~p<ZEkf<w,;>f");
      URL uRL0 = ResourceUtils.getURL("LNX.'o9'~$");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.extractJarFileURL(uRL1);
      ResourceUtils.getFile(uRL0, "H+R\"&q");
      ResourceUtils.isJarURL(uRL1);
      try { 
        MockURI.URI("H+R\"&q");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 3: H+R\"&q
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResourceUtils.getFile(",bYs]FE6T&yA");
      ResourceUtils.getFile(",bYs]FE6T&yA");
      ResourceUtils.getFile(",bYs]FE6T&yA");
      URL uRL0 = ResourceUtils.getURL(",bYs]FE6T&yA");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "H3[x6-", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        ResourceUtils.getFile(uRL1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = ".w`YFtUB=sJ=GHV3S";
      ResourceUtils.getFile(".w`YFtUB=sJ=GHV3S");
      try { 
        MockURL.URL("rw`B7:SGqmz", " cannot be resolved to absolute file path because it does not reside in the file system", "rw`B7:SGqmz");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: rw`b7:sgqmz
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("7o*99");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      ResourceUtils.getFile("7o*99");
      FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = ResourceUtils.getURL("7o*99");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.extractJarFileURL(uRL1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, "s%[,v", uRLStreamHandler0);
      ResourceUtils.extractJarFileURL(uRL2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "#";
      URL uRL0 = ResourceUtils.getURL("#");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.getFile(uRL1);
      URL uRL2 = ResourceUtils.extractJarFileURL(uRL1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("#");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "#");
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ResourceUtils.useCachesIfNecessary(uRLConnection0);
      String string1 = "";
      ResourceUtils.getFile(uRL0, "");
      ResourceUtils.isFileURL(uRL2);
      ResourceUtils.isJarURL(uRL0);
      ResourceUtils.getFile(uRL2);
      ResourceUtils.isJarURL(uRL1);
      try { 
        ResourceUtils.toURI("/F^%z0]");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 2: /F^%z0]
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "c7J3y>");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      URL uRL2 = ResourceUtils.extractJarFileURL(uRL1);
      ResourceUtils.getFile(uRL0);
      URI uRI0 = ResourceUtils.toURI(uRL2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResourceUtils.getFile(uRI0, "classpath:jar");
      ResourceUtils.getFile(uRL1, "H(,TsT od#_i{X[U{");
      ResourceUtils.isJarURL(uRL0);
      ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.getURL("H(,TsT od#_i{X[U{");
      ResourceUtils.getFile(uRI0);
      try { 
        ResourceUtils.getURL("classpath:jar");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [jar] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = ">4V>Rk:@B@bw";
      ResourceUtils.isUrl(">4V>Rk:@B@bw");
      ResourceUtils.isUrl(">4V>Rk:@B@bw");
      ResourceUtils.getURL(">4V>Rk:@B@bw");
      URL uRL0 = MockURL.getFtpExample();
      try { 
        ResourceUtils.getFile(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // URL cannot be resolved to absolute file path because it does not reside in the file system: ftp://ftp.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "f";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f");
      URL uRL0 = MockURL.getHttpExample();
      String string1 = "JH,g\"2\\ljS']l<9e";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JH,g\"2ljS']l<9e");
      ResourceUtils.toURI(uRL0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string2 = "YsFE7Mq.";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        ResourceUtils.getFile(uRL0, "YsFE7Mq.");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // YsFE7Mq. cannot be resolved to absolute file path because it does not reside in the file system: http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      URI uRI0 = ResourceUtils.toURI("classpath:spark.utils.ResourceUtils");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        MockURI.toURL(uRI0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: classpath
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = null;
      URL uRL0 = MockURL.getFtpExample();
      ResourceUtils.isFileURL(uRL0);
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ResourceUtils.useCachesIfNecessary(uRLConnection0);
      ResourceUtils.isUrl((String) null);
      URI uRI0 = ResourceUtils.toURI(uRL0);
      String string1 = "?$";
      try { 
        ResourceUtils.getFile(uRI0, "?$");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // ?$ cannot be resolved to absolute file path because it does not reside in the file system: ftp://ftp.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = ",yz)|&b%lS";
      URL uRL0 = ResourceUtils.getURL(",yz)|&b%lS");
      ResourceUtils.getFile(uRL0);
      String string1 = null;
      ResourceUtils.getFile(uRL0, (String) null);
      ResourceUtils.isFileURL(uRL0);
      ResourceUtils.isJarURL(uRL0);
      URI uRI0 = ResourceUtils.toURI(uRL0);
      ResourceUtils.getFile(uRI0);
      ResourceUtils.isJarURL(uRL0);
      // Undeclared exception!
      try { 
        ResourceUtils.getFile((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource location must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL(".t(I");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.getFile(uRL1);
      URL uRL2 = ResourceUtils.getURL(".t(I");
      URL uRL3 = ResourceUtils.extractJarFileURL(uRL2);
      ResourceUtils.getFile(uRL3, ".t(I");
      URI uRI0 = ResourceUtils.toURI("");
      try { 
        ResourceUtils.getFile(uRI0, ".t(I");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // .t(I cannot be resolved to absolute file path because it does not reside in the file system: 
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("Fw30h~4#v+[o>");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      URL uRL2 = ResourceUtils.extractJarFileURL(uRL1);
      String string0 = "]w 6DLlq{-4lDja[lT?";
      ResourceUtils.getFile(uRL2, "]w 6DLlq{-4lDja[lT?");
      // Undeclared exception!
      try { 
        ResourceUtils.getFile((URL) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource URL must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.getFile(uRL1);
      URI uRI0 = ResourceUtils.toURI("");
      String string0 = "classpath:";
      URL uRL2 = ResourceUtils.getURL("classpath:");
      ResourceUtils.isJarURL(uRL1);
      ResourceUtils.getFile("");
      URL uRL3 = ResourceUtils.extractJarFileURL(uRL1);
      ResourceUtils.getFile(uRL0);
      ResourceUtils.isJarURL(uRL3);
      URL uRL4 = ResourceUtils.extractJarFileURL(uRL2);
      ResourceUtils.getFile(uRL4, "");
      ResourceUtils.isFileURL(uRL3);
      try { 
        ResourceUtils.getFile(uRI0, "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         //  cannot be resolved to absolute file path because it does not reside in the file system: 
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResourceUtils.getFile("org.eclipse.sisu.space.ResourceEnumeration$NestedJarConnection");
      URL uRL0 = ResourceUtils.getURL("org.eclipse.sisu.space.ResourceEnumeration$NestedJarConnection");
      URI uRI0 = ResourceUtils.toURI(uRL0);
      ResourceUtils.getFile(uRI0, "Lq1@svK<p");
      ResourceUtils.toURI(uRL0);
      ResourceUtils.getFile(uRI0, (String) null);
      ResourceUtils.getFile("/{UI)wGYv>E(<G'Y@ti");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.toURI((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.isFileURL((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.getFile((URI) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource URI must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URI uRI0 = null;
      // Undeclared exception!
      try { 
        ResourceUtils.getFile((URI) null, "dh3V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource URI must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        ResourceUtils.getURL((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource location must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.toURI(uRL1);
      ResourceUtils.isJarURL(uRL0);
      URL uRL2 = ResourceUtils.extractJarFileURL(uRL1);
      ResourceUtils.getFile(uRL2, "");
      // Undeclared exception!
      try { 
        ResourceUtils.toURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("gC2");
      ResourceUtils.isFileURL(uRL0);
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ResourceUtils.useCachesIfNecessary(uRLConnection0);
      URLConnection uRLConnection1 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ResourceUtils.useCachesIfNecessary(uRLConnection1);
      URLConnection uRLConnection2 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ResourceUtils.useCachesIfNecessary(uRLConnection2);
      URI uRI0 = ResourceUtils.toURI("B$B-");
      String string0 = "Gj!X3g@{X#YR";
      try { 
        ResourceUtils.getFile(uRI0, "Gj!X3g@{X#YR");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Gj!X3g@{X#YR cannot be resolved to absolute file path because it does not reside in the file system: B$B-
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("");
      ResourceUtils.isFileURL(uRL0);
      URL uRL1 = null;
      // Undeclared exception!
      try { 
        ResourceUtils.isJarURL((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtils.useCachesIfNecessary((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("sbAHrt");
      URI uRI0 = ResourceUtils.toURI(uRL0);
      ResourceUtils.getFile(uRI0, "ix68");
      ResourceUtils.toURI(uRL0);
      ResourceUtils.getFile("sbAHrt");
      ResourceUtils.getFile("[]");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("\"58FX<\"<x\"y#");
      ResourceUtils.getFile("\"58FX<\"<x\"y#");
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ResourceUtils.useCachesIfNecessary(uRLConnection0);
      ResourceUtils.getFile(uRL0);
      try { 
        ResourceUtils.toURI("\"58FX<\"<x\"y#");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 0: \"58FX<\"<x\"y#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("");
      ResourceUtils.getFile(uRL0);
      URL uRL1 = ResourceUtils.getURL("");
      URI uRI0 = ResourceUtils.toURI(uRL1);
      ResourceUtils.getURL("!/");
      ResourceUtils.getFile("");
      ResourceUtils.getFile(uRI0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL(" ");
      ResourceUtils.getFile(uRL0);
      ResourceUtils.isFileURL(uRL0);
      URL uRL1 = ResourceUtils.getURL(" ");
      ResourceUtils.isFileURL(uRL1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResourceUtils.isUrl((String) null);
      URL uRL0 = ResourceUtils.getURL("%20");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.getFile(uRL1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("");
      ResourceUtils.getFile(uRL0);
      ResourceUtils.isUrl("");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("jar");
      ResourceUtils.getFile(uRL0, "jar");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.getFile("dzgm)uIWZYc1NC");
      ResourceUtils.isFileURL(uRL1);
      String string0 = "LM";
      URI uRI0 = ResourceUtils.toURI("LM");
      URI uRI1 = ResourceUtils.toURI(uRL1);
      ResourceUtils.getURL("");
      ResourceUtils.isJarURL(uRL1);
      ResourceUtils.isJarURL(uRL0);
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ResourceUtils.useCachesIfNecessary(uRLConnection0);
      ResourceUtils.isJarURL(uRL0);
      String string1 = null;
      ResourceUtils.getFile(uRI1, (String) null);
      ResourceUtils.toURI("LM");
      ResourceUtils.getFile(uRL0);
      ResourceUtils.getFile(uRL1);
      ResourceUtils.getFile(uRL1, "LM");
      URLConnection uRLConnection1 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ResourceUtils.useCachesIfNecessary(uRLConnection1);
      ResourceUtils.extractJarFileURL(uRL1);
      try { 
        ResourceUtils.getFile(uRI0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // URI cannot be resolved to absolute file path because it does not reside in the file system: LM
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ResourceUtils.useCachesIfNecessary(uRLConnection0);
      String string0 = "";
      URL uRL0 = ResourceUtils.getURL("");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.extractJarFileURL(uRL1);
      URL uRL2 = null;
      // Undeclared exception!
      try { 
        ResourceUtils.getFile((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource URL must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        ResourceUtils.extractJarFileURL((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("5OV_SOd");
      URI uRI0 = ResourceUtils.toURI(uRL0);
      ResourceUtils.getFile(uRI0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      URI uRI0 = ResourceUtils.toURI("qh92Nqd");
      try { 
        ResourceUtils.getFile(uRI0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // URI cannot be resolved to absolute file path because it does not reside in the file system: qh92Nqd
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("jar:");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.isJarURL(uRL1);
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ResourceUtils.useCachesIfNecessary(uRLConnection0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("");
      ResourceUtils.isJarURL(uRL0);
      // Undeclared exception!
      try { 
        ResourceUtils.useCachesIfNecessary((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("file:");
      ResourceUtils.getFile(uRL0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = null;
      ResourceUtils.isUrl((String) null);
      // Undeclared exception!
      try { 
        ResourceUtils.toURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResourceUtils.getFile(":I!X_#Zbrg#");
      ResourceUtils.isUrl(":I!X_#Zbrg#");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("]x~f=$[SbC~");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.isFileURL(uRL1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "S\\Lx~h]h8\"R5.A";
      String string1 = "\\},40:ef> #JLbvq%";
      URI uRI0 = MockURI.aHttpURI;
      try { 
        ResourceUtils.getFile(uRI0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // URI cannot be resolved to absolute file path because it does not reside in the file system: http://foo.bar
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResourceUtils.getFile("classpath:");
      ResourceUtils.getFile("classpath:");
      URL uRL0 = ResourceUtils.getURL("classpath:");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      URI uRI0 = MockURI.aFTPURI;
      ResourceUtils.getFile(uRL0);
      ResourceUtils.isJarURL(uRL1);
      try { 
        ResourceUtils.getFile(uRI0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // URI cannot be resolved to absolute file path because it does not reside in the file system: ftp://foo.bar
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "classpath:Resource URL must not be null";
      try { 
        ResourceUtils.getFile("classpath:Resource URL must not be null");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [Resource URL must not be null] cannot be resolved to absolute file path because it does not reside in the file system
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResourceUtils.isUrl((String) null);
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      try { 
        ResourceUtils.getFile(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // URL cannot be resolved to absolute file path because it does not reside in the file system: http://foo.bar
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceUtils.isUrl("classpath:spark.utils.ResourceUtils");
      ResourceUtils.isJarURL(uRL0);
      ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.isFileURL(uRL0);
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ResourceUtils.useCachesIfNecessary(uRLConnection0);
      ResourceUtils.isUrl((String) null);
      URI uRI0 = ResourceUtils.toURI(uRL0);
      String string0 = "?$";
      ResourceUtils.getFile(uRI0, "?$");
      ResourceUtils.getURL("?$");
      ResourceUtils.getFile(uRI0, (String) null);
      // Undeclared exception!
      try { 
        ResourceUtils.getFile((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Resource location must not be null
         //
         verifyException("spark.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceUtils.isJarURL(uRL0);
      try { 
        ResourceUtils.getFile(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // URL cannot be resolved to absolute file path because it does not reside in the file system: ftp://ftp.someFakeButWellFormedURL.org/fooExample
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "c7J3y>");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.getFile(uRL0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ResourceUtils.getFile(uRL1, "H(,TsT od#_i{X[U}");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.getURL("H(,TsT od#_i{X[U}");
      try { 
        ResourceUtils.getURL("classpath:jar");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // class path resource [jar] cannot be resolved to URL because it does not exist
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResourceUtils.isUrl("org.codehaus.classworlds.BytesURLStreamHandler");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(">4V>Rk:@B@bw");
      FileSystemHandling.createFolder(evoSuiteFile0);
      URL uRL0 = ResourceUtils.getURL("org.codehaus.classworlds.BytesURLStreamHandler");
      ResourceUtils.isJarURL(uRL0);
      MockURL.getFtpExample();
      ResourceUtils.isUrl("org.codehaus.classworlds.BytesURLStreamHandler");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      URI uRI0 = ResourceUtils.toURI("9!B*,3+Rwk,C3");
      URL uRL0 = ResourceUtils.getURL("%d");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      ResourceUtils.getURL("");
      ResourceUtils.isJarURL(uRL1);
      URL uRL2 = MockURL.URL(uRL0, "");
      URI uRI1 = ResourceUtils.toURI(uRL2);
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/Users/jhveras/evosuite/evosuite/plugins/jenkins/work/jobs/spark-jun-12-2017/workspace");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ResourceUtils.getFile(uRI1, "");
      ResourceUtils.getFile("[");
      try { 
        ResourceUtils.getFile(uRI0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // URI cannot be resolved to absolute file path because it does not reside in the file system: 9!B*,3+Rwk,C3
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "classpath:g4 .9l";
      ResourceUtils.isUrl("]M$Wa0^");
      URL uRL0 = ResourceUtils.getURL("");
      ResourceUtils.isFileURL(uRL0);
      URI uRI0 = ResourceUtils.toURI("");
      try { 
        ResourceUtils.getFile(uRI0, "classpath:g4 .9l");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // classpath:g4 .9l cannot be resolved to absolute file path because it does not reside in the file system: 
         //
         verifyException("spark.utils.ResourceUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL("");
      ResourceUtils.getFile(uRL0);
      ResourceUtils.getFile(uRL0);
      ResourceUtils.getFile(uRL0);
      ResourceUtils.isUrl("~%D&IF0yS&");
      ResourceUtils.isJarURL(uRL0);
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ResourceUtils.useCachesIfNecessary(uRLConnection0);
      URI uRI0 = ResourceUtils.toURI(uRL0);
      ResourceUtils.getFile(uRI0);
      ResourceUtils.getFile(uRL0);
      ResourceUtils.getFile(uRI0);
      URL uRL1 = MockURL.getFileExample();
      ResourceUtils.getFile(uRL1);
      ResourceUtils.getURL("#tT\fP,KLG6;");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      URL uRL0 = ResourceUtils.getURL(" ");
      URL uRL1 = ResourceUtils.extractJarFileURL(uRL0);
      URI uRI0 = ResourceUtils.toURI(uRL1);
      ResourceUtils.getFile(uRI0);
      URLConnection uRLConnection0 = mock(URLConnection.class, new ViolatedAssumptionAnswer());
      ResourceUtils.useCachesIfNecessary(uRLConnection0);
      URL uRL2 = ResourceUtils.getURL("");
      boolean boolean0 = ResourceUtils.isFileURL(uRL2);
      ResourceUtils.extractJarFileURL(uRL2);
      ResourceUtils.getFile(uRL0, "$<<2#V?[VO");
      URI uRI1 = ResourceUtils.toURI(uRL0);
      ResourceUtils.getFile(uRL2, " ");
      ResourceUtils.isUrl("");
      ResourceUtils.getFile("spark.utils.ResourceUtils");
      ResourceUtils.getFile(uRI0, "");
      assertEquals("file:/Users/jhveras/evosuite/evosuite/plugins/jenkins/work/jobs/spark-jun-12-2017/workspace/%20", uRI0.toString());
      
      ResourceUtils.toURI("spark.utils.ResourceUtils");
      ResourceUtils.getFile(uRI1);
      URI uRI2 = ResourceUtils.toURI(uRL1);
      ResourceUtils.getFile(uRI2, "");
      boolean boolean1 = ResourceUtils.isUrl("spark.utils.StringUtils");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}
